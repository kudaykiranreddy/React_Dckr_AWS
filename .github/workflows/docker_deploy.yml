name: Multi-Environment Deployment
 
on:
  push:
    branches:
      - main
  workflow_dispatch:
 
permissions:
  contents: write
 
jobs:
  build-and-deploy:
    name: Build, Test, and Push Docker Image
    runs-on: ubuntu-latest
 
    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
 
      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: To_do_app/package-lock.json
 
      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci
        working-directory: To_do_app
 
      # Step 4: Run tests (only for main branch)
      - name: Run tests
        if: github.ref_name == 'main'
        run: npm test
        working-directory: To_do_app
 
      # Step 5: Build the app
      - name: Build the app
        run: npm run build --verbose
        working-directory: To_do_app
 
      # Step 6: List dist directory for debugging
      - name: List dist directory
        run: ls -alh To_do_app/dist || echo "Dist directory not found"
 
      # Step 7: SonarQube analysis
      - name: Run SonarQube analysis
        if: github.ref_name == 'main'
        run: |
          echo "üîç Running SonarQube analysis..."
          cd To_do_app

          # Run tests with coverage
          npm install  # Ensure dependencies are installed
          npm run test -- --coverage || { echo "‚ùå Tests failed"; exit 1; }

          # Run SonarQube analysis
          sonar-scanner \
            -Dsonar.projectKey=my-react-app \
            -Dsonar.projectName="My React Application" \
            -Dsonar.projectVersion=1.0.0 \
            -Dsonar.sources=src \
            -Dsonar.exclusions=**/node_modules/**,**/*.test.js,**/*.spec.js \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.host.url=${{ secrets.SONARQUBE_URL }} \
            -Dsonar.login=${{ secrets.SONARQUBE_TOKEN }} || { echo "‚ùå SonarQube analysis failed"; exit 1; }

      # Step 8: Fetch SonarQube Analysis Results and Fail if Coverage < 80%
      - name: Check SonarQube Coverage
        if: github.ref_name == 'main'
        run: |
          echo "üîç Fetching SonarQube analysis results..."
          sleep 30  # Wait for SonarQube to process results

          # Fetch the analysis results via SonarQube API
          RESPONSE=$(curl -s -u ${{ secrets.SONARQUBE_TOKEN }} \
            "${{ secrets.SONARQUBE_URL }}/api/measures/component?component=${{ secrets.SONARQUBE_PROJECT_KEY }}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density")

          # Extract values using jq
          BUGS=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="bugs") | .value')
          VULNERABILITIES=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="vulnerabilities") | .value')
          CODE_SMELLS=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="code_smells") | .value')
          COVERAGE=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="coverage") | .value')
          DUPLICATIONS=$(echo $RESPONSE | jq -r '.component.measures[] | select(.metric=="duplicated_lines_density") | .value')

          # Print the results
          echo "Bugs: $BUGS"
          echo "Vulnerabilities: $VULNERABILITIES"
          echo "Code Smells: $CODE_SMELLS"
          echo "Coverage: $COVERAGE%"
          echo "Duplications: $DUPLICATIONS%"

          # Fail the pipeline if coverage is below 80%
          COVERAGE_VALUE=$(echo $COVERAGE | awk '{print ($1+0)}')  # Convert to number
          if (( $(echo "$COVERAGE_VALUE < 80" | bc -l) )); then
            echo "‚ùå Code coverage is below 80%! Failing the pipeline."
            exit 1
          else
            echo "‚úÖ Code coverage meets the required threshold."
          fi

      # Step 9: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
 
      # Step 10: Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/todo-app:latest .
        working-directory: To_do_app
 
      # Step 11: Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/todo-app:latest
